---
title: "Time-dependent arrivals"
author: "Thomas Monks, Alison Harper"
format: html
editor: visual
---

## 1. Background

The treatment simulation model has a time-dependent arrival profile for patients. To simulated these arrivals correctly in DES we need to use one of several algorithms. Here we make use of the **thinning algorithm**.

Thinning is a acceptance-rejection sampling method and is used to generate inter-arrival times from a NSPP.

> **Motivation**: In DES we use thinning as an approach to generate time dependent arrival of patients to a health care service.

### 1.1 An example NSPP

The table below is adapted from Banks et al (2013) and breaks an arrival process down into 60 minutes intervals.

| t(min) | Mean time between arrivals (min) | Arrival Rate $\lambda(t)$ (arrivals/min) |
|:------:|:--------------------------------:|:----------------------------------------:|
|   0    |                15                |                   1/15                   |
|   60   |                12                |                   1/12                   |
|  120   |                7                 |                   1/7                    |
|  180   |                5                 |                   1/5                    |
|  240   |                8                 |                   1/8                    |
|  300   |                10                |                   1/10                   |
|  360   |                15                |                   1/15                   |
|  420   |                20                |                   1/20                   |
|  480   |                20                |                   1/20                   |

> **Interpretation**: In the table above the fastest arrival rate is 1/5 customers per minute or 5 minutes between patient arrivals.

### **1.2 The thinning algorithm**

A NSPP has arrival rate $\lambda(t)$ where $0 \leq t \leq T$

Here $i$ is the arrival number and $\mathcal{T_i}$ is its arrival time.

1.  Let $\lambda^* = \max_{0 \leq t \leq T}\lambda(t)$ be the maximum of the arrival rate function and set $t = 0$ and $i=1$

2.  Generate $e$ from the exponential distribution with rate $\lambda^*$ and let $t = t + e$ (this is the time of the next entity will arrive)

3.  Generate $u$ from the $U(0,1)$ distribution. If $u \leq \dfrac{\lambda(t)}{\lambda^*}$ then $\mathcal{T_i} =t$ and $i = i + 1$

4.  Go to Step 2.

## 2. Imports

```{r}
library(simmer)
library(tibble)
library(ggplot2)
suppressMessages(library(RCurl))
```

## 3. Read in data

Here we read in the example non-stationary data and compute the arrival rate.

```{r}
NSPP_PATH = 'https://raw.githubusercontent.com/TomMonks/treat-sim-rsimmer/main/data/nspp_example1.csv'

csv_data <- getURL(NSPP_PATH)
arrivals <- read.csv(text=csv_data)
names(arrivals) <- c("period", "mean_iat")

# create arrival rate
arrivals$arrival_rate = 1.0 / arrivals$mean_iat

arrivals
```

```{r}
ggplot(data=arrivals, aes(x=period, y=mean_iat)) +
  geom_bar(stat="identity", fill="steelblue") + 
  xlab("Time of day (mins)") + 
  ylab("Mean IAT (min)")
```

## 4. Algorithm implementation

### 4.1 NSPP sampling function

```{r}
nspp_thinning <- function(simulation_time, data, debug=FALSE){
  
  # calc time interval: assumes intervals are of equal length
  interval <- data$period[2] - data$period[1]
  
  # maximum arrival rate (smallest time between arrivals)
  lambda_max <- max(data$arrival_rate)

  while(TRUE){
    # get time bucket (row of dataframe to use)
    t <- floor(simulation_time / interval) %% nrow(data) + 1
    lambda_t <- data$arrival_rate[t]
    
    # set to a large number so that at least 1 sample is taken
    u <- Inf
    rejects <- -1
    
    # running total of time until next arrival
    inter_arrival_time <- 0.0
    
    # reject proportionate to lambda_t / lambda_max
    ratio <- lambda_t / lambda_max
    while(u >= ratio){
      rejects <- rejects + 1
      # sample using max arrival rate
      inter_arrival_time <- inter_arrival_time + rexp(1, lambda_max)
      u <- runif(1, 0.0, 1.0)
    }
    
    if(debug){
      print({paste("Time:", simulation_time, 
                   " Rejections:", rejects, 
                   " t:", t, 
                   " lambda_t:", lambda_t, 
                   " IAT:", inter_arrival_time)})
    }
      
    return(inter_arrival_time)
  }
}
```

### 4.2 Example usage

The function can be used in the same way as `rexp` to generate new patients. To illustrate its use we first create a simple patient pathway trajectory that prints out some event and acts as a delay.

```{r}
patient <- trajectory("patient pathway") %>% 
  # just a simple delay
  log_(function() {paste("Patient arrival")}, level = 1) %>% 
  timeout(function() rnorm(1, 10.0, 1.0)) %>% 
  log_(function() {paste("Exit treatment pathway")}, level = 1)
  
```

We then run the model with a generator that uses the `nspp_thinning` sampling function. Note that the function accepts the current simulation time `now(env)` and the dataframe containing the arrivals `arrivals`.

> Important learning point: we need to detach `run` from the creation of the simulation environment. This will allow `now(env)` to run correctly. If we ignore this rule and include `run` in the creation pipe the same time will be passed to the thinning function and it will under/over sample arrivals. See https://r-simmer.org/articles/simmer-03-trajectories.html

```{r}
env <- simmer("TreatSim", log_level=0) 

env %>% 
  add_generator("patient", patient, 
                function() nspp_thinning(now(env), arrivals, debug=TRUE)) %>% 
  run(until=540.0)
  
```

## 5. Validation

> The total number of arrivals in 540 minutes

Here we will repeat the same 10,000 times and then explore the distribution of the number of arrivals. If all has gone to plan this should be a Poisson distribution with mean \~53.

```{r}
# expected arrivals from data.
round(sum(arrivals$arrival_rate * 60), 2)
```

We can use the `simmer` function `get_n_generated` to return the number of patients generated.

```{r}
arrivals_by_replication <- function(envs){
  results <- vector()
  for(env in envs){
    results <- c(results, get_n_generated(env, "patient"))
  }
  return(data.frame(results))
}
```

```{r}
single_run <- function(env, rep_number, run_length, debug_arrivals=FALSE){
  env %>% 
    add_generator("patient", patient, 
                  function() nspp_thinning(now(env), arrivals, debug=debug_arrivals)) %>% 
    run(until=540.0)
  return(env)
}
```

```{r}
RUN_LENGTH <- 540.0
N_REPS <- 500
SEED <- 42

set.seed(SEED)

patient <- trajectory("patient pathway") %>% 
  # just a simple delay
  log_(function() {paste("Exit treatment pathway")}, level = 1)

# note unlike in simmer documentation we use a traditional for loop
# instead of lapply. This allows us to separeate env creation
# from run and preserve the environment interaction between NSPP 
# and current sim time.
envs = vector()
for(rep in 1:N_REPS){
  env <- simmer("TreatSim", log_level=0) 
  single_run(env, i, RUN_LENGTH)
  envs <- c(envs, env)
}

# # get the number of arrivals generated
results <- arrivals_by_replication(envs)

# show mean number of arrivals. Should be close to 53
mean(results$results)
```

```{r}
ggplot(results, aes(x=results)) + 
  geom_histogram(binwidth=1, fill="steelblue") + 
  xlab("Patient arrivals in 540 minutes") + 
  ylab("Replications")
```
